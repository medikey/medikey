/**
 * Like a Circular Buffer, but the values are deduplicated.
 * Shares the properties of both a Circular Buffer and a Set.
 */ var _computedKey;
_computedKey = Symbol.iterator;
export class CircularSet {
  capacity;
  set;
  constructor(capacity){
    this.capacity = capacity;
    this.set = new Set();
  }
  add(item) {
    if (this.set.has(item)) {
      return;
    }
    if (this.set.size >= this.capacity) {
      const oldest = this.set.values().next().value;
      if (oldest) {
        this.set.delete(oldest);
      }
    }
    this.set.add(item);
  }
  has(item) {
    return this.set.has(item);
  }
  [_computedKey]() {
    return this.set.values();
  }
}
//# sourceMappingURL=CircularSet.js.map