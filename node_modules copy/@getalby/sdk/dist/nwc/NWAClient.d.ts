import { Relay } from "nostr-tools";
import { BudgetRenewalPeriod, Nip47Method, Nip47NotificationType } from "./types";
import { NWCClient } from "./NWCClient";
export type NWAOptions = {
    relayUrl: string;
    appPubkey: string;
    requestMethods: Nip47Method[];
    name?: string;
    icon?: string;
    notificationTypes?: Nip47NotificationType[];
    maxAmount?: number;
    budgetRenewal?: BudgetRenewalPeriod;
    expiresAt?: number;
    isolated?: boolean;
    returnTo?: string;
    metadata?: unknown;
};
export type NewNWAClientOptions = Omit<NWAOptions, "appPubkey"> & {
    appSecretKey?: string;
};
export declare class NWAClient {
    options: NWAOptions;
    appSecretKey: string;
    relay: Relay;
    constructor(options: NewNWAClientOptions);
    /**
     * returns the NWA connection URI which should be given to the wallet
     */
    get connectionUri(): string;
    /**
     * returns the NWA connection URI which should be given to the wallet
     * @param nwaSchemeSuffix open a specific wallet. e.g. "alby" will set the scheme to
     * nostr+walletauth+alby to ensure the link will be opened in an Alby wallet
     */
    getConnectionUri(nwaSchemeSuffix?: string): string;
    static parseWalletAuthUrl(walletAuthUrl: string): NWAOptions;
    /**
     * Waits for a new app connection to be created via NWA (https://github.com/nostr-protocol/nips/pull/851)
     *
     * @returns a new NWCClient
     */
    subscribe(args: {
        onSuccess: (nwcClient: NWCClient) => void;
    }): Promise<{
        unsub: () => void;
    }>;
    private _checkConnected;
}
