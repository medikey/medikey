{
  "version": 3,
  "sources": ["../../.pnpm/@jsr+nostrify__nostrify@0.46.5_typescript@5.9.2/node_modules/@jsr/nostrify__nostrify/NSchema.ts", "../../.pnpm/@jsr+std__encoding@0.224.3/node_modules/@jsr/std__encoding/_validate_binary_like.ts", "../../.pnpm/@jsr+std__encoding@0.224.3/node_modules/@jsr/std__encoding/hex.ts", "../../.pnpm/@jsr+std__encoding@0.224.3/node_modules/@jsr/std__encoding/base64.ts", "../../.pnpm/@jsr+nostrify__nostrify@0.46.5_typescript@5.9.2/node_modules/@jsr/nostrify__nostrify/utils/N64.ts", "../../.pnpm/@jsr+nostrify__nostrify@0.46.5_typescript@5.9.2/node_modules/@jsr/nostrify__nostrify/NIP98.ts"],
  "sourcesContent": ["import { z } from 'zod';\n\nimport {\n  NostrClientAUTH,\n  NostrClientCLOSE,\n  NostrClientCOUNT,\n  NostrClientEVENT,\n  NostrClientMsg,\n  NostrClientREQ,\n  NostrConnectRequest,\n  NostrConnectResponse,\n  NostrEvent,\n  NostrFilter,\n  NostrMetadata,\n  NostrRelayAUTH,\n  NostrRelayCLOSED,\n  NostrRelayCOUNT,\n  NostrRelayEOSE,\n  NostrRelayEVENT,\n  NostrRelayMsg,\n  NostrRelayNOTICE,\n  NostrRelayOK,\n} from '@jsr/nostrify__types';\n\n/**\n * A suite of [zod](https://github.com/colinhacks/zod) schemas for Nostr.\n *\n * ```ts\n * import { NSchema as n } from '@nostrify/nostrify';\n *\n * const event: NostrEvent = n.event().parse(eventData);\n * const metadata: NostrMetadata = n.json().pipe(n.metadata()).parse(event.content);\n * const msg: NostrRelayMsg = n.relayMsg().parse(e.data);\n * const nsec: `nsec1${string}` = n.bech32('nsec').parse(token);\n * ```\n */\nclass NSchema {\n  /** Schema to validate Nostr hex IDs such as event IDs and pubkeys. */\n  static id(): z.ZodString {\n    return z.string().regex(/^[0-9a-f]{64}$/);\n  }\n\n  /** Nostr event schema. */\n  static event(): z.ZodType<NostrEvent> {\n    return z.object({\n      id: NSchema.id(),\n      kind: z.number().int().nonnegative(),\n      pubkey: NSchema.id(),\n      tags: z.string().array().array(),\n      content: z.string(),\n      created_at: z.number().int().nonnegative(),\n      sig: z.string(),\n    });\n  }\n\n  /** Nostr filter schema. */\n  static filter(): z.ZodType<NostrFilter> {\n    return z.object({\n      kinds: z.number().int().nonnegative().array().optional(),\n      ids: NSchema.id().array().optional(),\n      authors: NSchema.id().array().optional(),\n      since: z.number().int().nonnegative().optional(),\n      until: z.number().int().nonnegative().optional(),\n      limit: z.number().int().nonnegative().optional(),\n      search: z.string().optional(),\n    })\n      .passthrough()\n      .transform((value) => {\n        const keys = ['kinds', 'ids', 'authors', 'since', 'until', 'limit', 'search'];\n        return Object.entries(value).reduce((acc, [key, val]) => {\n          if (keys.includes(key) || key.startsWith('#')) {\n            acc[key] = val;\n          }\n          return acc;\n        }, {} as Record<string, unknown>) as NostrFilter;\n      }) as z.ZodType<NostrFilter>;\n  }\n\n  /**\n   * Bech32 string.\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#bech32\n   */\n  static bech32<P extends string>(prefix?: P): z.ZodType<`${P}1${string}`> {\n    return z\n      .string()\n      .regex(/^[\\x21-\\x7E]{1,83}1[023456789acdefghjklmnpqrstuvwxyz]{6,}$/)\n      .refine((value) => prefix ? value.startsWith(`${prefix}1`) : true) as z.ZodType<`${P}1${string}`>;\n  }\n\n  /** WebSocket URL starting with `ws://` or `wss://`. */\n  static relayUrl(): z.ZodType<`ws://${string}` | `wss://${string}`> {\n    return z\n      .string()\n      .url()\n      .regex(/^wss?:\\/\\//) as z.ZodType<`ws://${string}` | `wss://${string}`>;\n  }\n\n  /** NIP-01 `EVENT` message from client to relay. */\n  static clientEVENT(): z.ZodType<NostrClientEVENT> {\n    return z.tuple([z.literal('EVENT'), NSchema.event()]);\n  }\n\n  /** NIP-01 `REQ` message from client to relay. */\n  static clientREQ(): z.ZodType<NostrClientREQ> {\n    return z.tuple([z.literal('REQ'), z.string()]).rest(NSchema.filter());\n  }\n\n  /** NIP-45 `COUNT` message from client to relay. */\n  static clientCOUNT(): z.ZodType<NostrClientCOUNT> {\n    return z.tuple([z.literal('COUNT'), z.string()]).rest(NSchema.filter());\n  }\n\n  /** NIP-01 `CLOSE` message from client to relay. */\n  static clientCLOSE(): z.ZodType<NostrClientCLOSE> {\n    return z.tuple([z.literal('CLOSE'), z.string()]);\n  }\n\n  /** NIP-42 `AUTH` message from client to relay. */\n  static clientAUTH(): z.ZodType<NostrClientAUTH> {\n    return z.tuple([z.literal('AUTH'), NSchema.event()]);\n  }\n\n  /** NIP-01 message from client to relay. */\n  static clientMsg(): z.ZodType<NostrClientMsg> {\n    return z.union([\n      NSchema.clientEVENT(),\n      NSchema.clientREQ(),\n      NSchema.clientCOUNT(),\n      NSchema.clientCLOSE(),\n      NSchema.clientAUTH(),\n    ]);\n  }\n\n  /** NIP-01 `EVENT` message from relay to client. */\n  static relayEVENT(): z.ZodType<NostrRelayEVENT> {\n    return z.tuple([z.literal('EVENT'), z.string(), NSchema.event()]);\n  }\n\n  /** NIP-01 `OK` message from relay to client. */\n  static relayOK(): z.ZodType<NostrRelayOK> {\n    return z.tuple([z.literal('OK'), NSchema.id(), z.boolean(), z.string()]);\n  }\n\n  /** NIP-01 `EOSE` message from relay to client. */\n  static relayEOSE(): z.ZodType<NostrRelayEOSE> {\n    return z.tuple([z.literal('EOSE'), z.string()]);\n  }\n\n  /** NIP-01 `NOTICE` message from relay to client. */\n  static relayNOTICE(): z.ZodType<NostrRelayNOTICE> {\n    return z.tuple([z.literal('NOTICE'), z.string()]);\n  }\n\n  /** NIP-01 `CLOSED` message from relay to client. */\n  static relayCLOSED(): z.ZodType<NostrRelayCLOSED> {\n    return z.tuple([z.literal('CLOSED'), z.string(), z.string()]);\n  }\n\n  /** NIP-42 `AUTH` message from relay to client. */\n  static relayAUTH(): z.ZodType<NostrRelayAUTH> {\n    return z.tuple([z.literal('AUTH'), z.string()]);\n  }\n\n  /** NIP-45 `COUNT` message from relay to client. */\n  static relayCOUNT(): z.ZodType<NostrRelayCOUNT> {\n    return z.tuple([\n      z.literal('COUNT'),\n      z.string(),\n      z.object({\n        count: z.number().int().nonnegative(),\n        approximate: z.boolean().optional(),\n      }),\n    ]);\n  }\n\n  /** NIP-01 message from relay to client. */\n  static relayMsg(): z.ZodType<NostrRelayMsg> {\n    return z.union([\n      NSchema.relayEVENT(),\n      NSchema.relayOK(),\n      NSchema.relayEOSE(),\n      NSchema.relayNOTICE(),\n      NSchema.relayCLOSED(),\n      NSchema.relayAUTH(),\n      NSchema.relayCOUNT(),\n    ]);\n  }\n\n  /** Kind 0 content schema. */\n  static metadata(): z.ZodType<NostrMetadata> {\n    return z.object({\n      about: z.string().optional().catch(undefined),\n      banner: z.string().url().optional().catch(undefined),\n      bot: z.boolean().optional().catch(undefined),\n      display_name: z.string().optional().catch(undefined),\n      lud06: NSchema.bech32('lnurl').optional().catch(undefined),\n      lud16: z.string().email().optional().catch(undefined),\n      name: z.string().optional().catch(undefined),\n      nip05: z.string().email().optional().catch(undefined),\n      picture: z.string().url().optional().catch(undefined),\n      website: z.string().url().optional().catch(undefined),\n    }).passthrough() as z.ZodType<NostrMetadata>;\n  }\n\n  /** NIP-46 request content schema. */\n  static connectRequest(): z.ZodType<NostrConnectRequest> {\n    return z.object({\n      id: z.string(),\n      method: z.string(),\n      params: z.string().array(),\n    });\n  }\n\n  /** NIP-46 response content schema. */\n  static connectResponse(): z.ZodType<NostrConnectResponse> {\n    return z.object({\n      id: z.string(),\n      result: z.string(),\n      error: z.string().optional(),\n    });\n  }\n\n  /**\n   * Helper schema to parse a JSON string. It should then be piped into another schema. For example:\n   *\n   * ```ts\n   * const event = NSchema.json().pipe(NSchema.event()).parse(data);\n   * ```\n   */\n  static json(): z.ZodType<unknown> {\n    return z.string().transform((value, ctx) => {\n      try {\n        return JSON.parse(value) as unknown;\n      } catch (_e) {\n        ctx.addIssue({ code: z.ZodIssueCode.custom, message: 'Invalid JSON' });\n        return z.NEVER;\n      }\n    });\n  }\n}\n\nexport { NSchema, z };\n", "// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n\nconst encoder = new TextEncoder();\n\nfunction getTypeName(value: unknown): string {\n  const type = typeof value;\n  if (type !== \"object\") {\n    return type;\n  } else if (value === null) {\n    return \"null\";\n  } else {\n    return value?.constructor?.name ?? \"object\";\n  }\n}\n\nexport function validateBinaryLike(source: unknown): Uint8Array {\n  if (typeof source === \"string\") {\n    return encoder.encode(source);\n  } else if (source instanceof Uint8Array) {\n    return source;\n  } else if (source instanceof ArrayBuffer) {\n    return new Uint8Array(source);\n  }\n  throw new TypeError(\n    `The input must be a Uint8Array, a string, or an ArrayBuffer. Received a value of the type ${\n      getTypeName(source)\n    }.`,\n  );\n}\n", "// Copyright 2009 The Go Authors. All rights reserved.\n// https://github.com/golang/go/blob/master/LICENSE\n// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n\n/**\n * Port of the Go\n * {@link https://github.com/golang/go/blob/go1.12.5/src/encoding/hex/hex.go | encoding/hex}\n * library.\n *\n * This module is browser compatible.\n *\n * ```ts\n * import {\n *   decodeHex,\n *   encodeHex,\n * } from \"@std/encoding/hex\";\n * import { assertEquals } from \"@std/assert/assert-equals\";\n *\n * assertEquals(encodeHex(\"abc\"), \"616263\");\n *\n * assertEquals(\n *   decodeHex(\"616263\"),\n *   new TextEncoder().encode(\"abc\"),\n * );\n * ```\n *\n * @module\n */\n\nimport { validateBinaryLike } from \"./_validate_binary_like.js\";\n\nconst hexTable = new TextEncoder().encode(\"0123456789abcdef\");\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\n\nfunction errInvalidByte(byte: number) {\n  return new TypeError(`Invalid byte '${String.fromCharCode(byte)}'`);\n}\n\nfunction errLength() {\n  return new RangeError(\"Odd length hex string\");\n}\n\n/** Converts a hex character into its value. */\nfunction fromHexChar(byte: number): number {\n  // '0' <= byte && byte <= '9'\n  if (48 <= byte && byte <= 57) return byte - 48;\n  // 'a' <= byte && byte <= 'f'\n  if (97 <= byte && byte <= 102) return byte - 97 + 10;\n  // 'A' <= byte && byte <= 'F'\n  if (65 <= byte && byte <= 70) return byte - 65 + 10;\n\n  throw errInvalidByte(byte);\n}\n\n/**\n * Converts data into a hex-encoded string.\n *\n * @param src The data to encode.\n *\n * @returns The hex-encoded string.\n *\n * @example Usage\n * ```ts\n * import { encodeHex } from \"@std/encoding/hex\";\n * import { assertEquals } from \"@std/assert/assert-equals\";\n *\n * assertEquals(encodeHex(\"abc\"), \"616263\");\n * ```\n */\nexport function encodeHex(src: string | Uint8Array | ArrayBuffer): string {\n  const u8 = validateBinaryLike(src);\n\n  const dst = new Uint8Array(u8.length * 2);\n  for (let i = 0; i < dst.length; i++) {\n    const v = u8[i]!;\n    dst[i * 2] = hexTable[v >> 4]!;\n    dst[i * 2 + 1] = hexTable[v & 0x0f]!;\n  }\n  return textDecoder.decode(dst);\n}\n\n/**\n * Decodes the given hex-encoded string. If the input is malformed, an error is\n * thrown.\n *\n * @param src The hex-encoded string to decode.\n *\n * @returns The decoded data.\n *\n * @example Usage\n * ```ts\n * import { decodeHex } from \"@std/encoding/hex\";\n * import { assertEquals } from \"@std/assert/assert-equals\";\n *\n * assertEquals(\n *   decodeHex(\"616263\"),\n *   new TextEncoder().encode(\"abc\"),\n * );\n * ```\n */\nexport function decodeHex(src: string): Uint8Array {\n  const u8 = textEncoder.encode(src);\n  const dst = new Uint8Array(u8.length / 2);\n  for (let i = 0; i < dst.length; i++) {\n    const a = fromHexChar(u8[i * 2]!);\n    const b = fromHexChar(u8[i * 2 + 1]!);\n    dst[i] = (a << 4) | b;\n  }\n\n  if (u8.length % 2 === 1) {\n    // Check for invalid char before reporting bad length,\n    // since the invalid char (if present) is an earlier problem.\n    fromHexChar(u8[dst.length * 2]!);\n    throw errLength();\n  }\n\n  return dst;\n}\n", "// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\n\n/**\n * Utilities for\n * {@link https://www.rfc-editor.org/rfc/rfc4648.html#section-4 | base64}\n * encoding and decoding.\n *\n * This module is browser compatible.\n *\n * ```ts\n * import {\n *   encodeBase64,\n *   decodeBase64,\n * } from \"@std/encoding/base64\";\n * import { assertEquals } from \"@std/assert/assert-equals\";\n *\n * const foobar = new TextEncoder().encode(\"foobar\");\n *\n * assertEquals(encodeBase64(foobar), \"Zm9vYmFy\");\n * assertEquals(decodeBase64(\"Zm9vYmFy\"), foobar);\n * ```\n *\n * @module\n */\n\nimport { validateBinaryLike } from \"./_validate_binary_like.js\";\n\nconst base64abc = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"+\",\n  \"/\",\n];\n\n/**\n * Converts data into a base64-encoded string.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc4648.html#section-4}\n *\n * @param data The data to encode.\n * @returns The base64-encoded string.\n *\n * @example Usage\n * ```ts\n * import { encodeBase64 } from \"@std/encoding/base64\";\n * import { assertEquals } from \"@std/assert/assert-equals\";\n *\n * assertEquals(encodeBase64(\"foobar\"), \"Zm9vYmFy\");\n * ```\n */\nexport function encodeBase64(data: ArrayBuffer | Uint8Array | string): string {\n  // CREDIT: https://gist.github.com/enepomnyaschih/72c423f727d395eeaa09697058238727\n  const uint8 = validateBinaryLike(data);\n  let result = \"\";\n  let i;\n  const l = uint8.length;\n  for (i = 2; i < l; i += 3) {\n    result += base64abc[(uint8[i - 2]!) >> 2];\n    result += base64abc[\n      (((uint8[i - 2]!) & 0x03) << 4) |\n      ((uint8[i - 1]!) >> 4)\n    ];\n    result += base64abc[\n      (((uint8[i - 1]!) & 0x0f) << 2) |\n      ((uint8[i]!) >> 6)\n    ];\n    result += base64abc[(uint8[i]!) & 0x3f];\n  }\n  if (i === l + 1) {\n    // 1 octet yet to write\n    result += base64abc[(uint8[i - 2]!) >> 2];\n    result += base64abc[((uint8[i - 2]!) & 0x03) << 4];\n    result += \"==\";\n  }\n  if (i === l) {\n    // 2 octets yet to write\n    result += base64abc[(uint8[i - 2]!) >> 2];\n    result += base64abc[\n      (((uint8[i - 2]!) & 0x03) << 4) |\n      ((uint8[i - 1]!) >> 4)\n    ];\n    result += base64abc[((uint8[i - 1]!) & 0x0f) << 2];\n    result += \"=\";\n  }\n  return result;\n}\n\n/**\n * Decodes a base64-encoded string.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc4648.html#section-4}\n *\n * @param b64 The base64-encoded string to decode.\n * @returns The decoded data.\n *\n * @example Usage\n * ```ts\n * import { decodeBase64 } from \"@std/encoding/base64\";\n * import { assertEquals } from \"@std/assert/assert-equals\";\n *\n * assertEquals(\n *   decodeBase64(\"Zm9vYmFy\"),\n *   new TextEncoder().encode(\"foobar\")\n * );\n * ```\n */\nexport function decodeBase64(b64: string): Uint8Array {\n  const binString = atob(b64);\n  const size = binString.length;\n  const bytes = new Uint8Array(size);\n  for (let i = 0; i < size; i++) {\n    bytes[i] = binString.charCodeAt(i);\n  }\n  return bytes;\n}\n", "import { NostrEvent } from '@jsr/nostrify__types';\nimport { decodeBase64, encodeBase64 } from '@jsr/std__encoding/base64';\n\nimport { NSchema as n } from '../NSchema.js';\n\n/** Nostr base64 helper utilities. */\nexport class N64 {\n  /** Encode an event as a base64 string. */\n  static encodeEvent(event: NostrEvent): string {\n    return encodeBase64(JSON.stringify(event));\n  }\n\n  /** Decode an event from a base64 string. Validates the event's structure but does not verify its signature. */\n  static decodeEvent(base64: string): NostrEvent {\n    const bytes = decodeBase64(base64);\n    const text = new TextDecoder().decode(bytes);\n\n    return n\n      .json()\n      .pipe(n.event())\n      .parse(text);\n  }\n}\n", "import { NostrEvent } from '@jsr/nostrify__types';\nimport { encodeHex } from '@jsr/std__encoding/hex';\nimport { verifyEvent as _verifyEvent } from 'nostr-tools';\n\nimport { N64 } from './utils/N64.js';\n\n/** [NIP-98](https://github.com/nostr-protocol/nips/blob/master/98.md) HTTP auth. */\nexport class NIP98 {\n  /** Generate an auth event template from a Request. */\n  static async template(\n    request: Request,\n    opts?: { validatePayload?: boolean },\n  ): Promise<Omit<NostrEvent, 'id' | 'pubkey' | 'sig'>> {\n    const { validatePayload = ['POST', 'PUT', 'PATCH'].includes(request.method) } = opts ?? {};\n    const { method, url } = request;\n\n    const tags = [\n      ['method', method],\n      ['u', url],\n    ];\n\n    if (validatePayload) {\n      const buffer = await request.clone().arrayBuffer();\n      const digest = await crypto.subtle.digest('SHA-256', buffer);\n\n      tags.push(['payload', encodeHex(digest)]);\n    }\n\n    return {\n      kind: 27235,\n      content: '',\n      tags,\n      created_at: Math.floor(Date.now() / 1000),\n    };\n  }\n\n  /** Compare the auth event with the request, throwing a human-readable error if validation fails. */\n  static async verify(\n    request: Request,\n    opts?: {\n      maxAge?: number;\n      validatePayload?: boolean;\n      verifyEvent?: (event: NostrEvent) => boolean;\n    },\n  ): Promise<NostrEvent> {\n    const {\n      maxAge = 60_000,\n      validatePayload = ['POST', 'PUT', 'PATCH'].includes(request.method),\n      verifyEvent = _verifyEvent,\n    } = opts ?? {};\n\n    const header = request.headers.get('authorization');\n    if (!header) {\n      throw new Error('Missing Nostr authorization header');\n    }\n\n    const token = header.match(/^Nostr (.+)$/)?.[1];\n    if (!token) {\n      throw new Error('Missing Nostr authorization token');\n    }\n\n    const event = N64.decodeEvent(token);\n    if (!verifyEvent(event)) {\n      throw new Error('Event signature is invalid');\n    }\n\n    const age = Date.now() - (event.created_at * 1_000);\n    const u = event.tags.find(([name]) => name === 'u')?.[1];\n    const method = event.tags.find(([name]) => name === 'method')?.[1];\n    const payload = event.tags.find(([name]) => name === 'payload')?.[1];\n\n    if (event.kind !== 27235) {\n      throw new Error('Event must be kind 27235');\n    }\n    if (u !== request.url) {\n      throw new Error('Event URL does not match request URL');\n    }\n    if (method !== request.method) {\n      throw new Error('Event method does not match HTTP request method');\n    }\n    if (age >= maxAge) {\n      throw new Error('Event expired');\n    }\n    if (validatePayload && payload !== undefined) {\n      const buffer = await request.clone().arrayBuffer();\n      const digest = await crypto.subtle.digest('SHA-256', buffer);\n\n      if (encodeHex(digest) !== payload) {\n        throw new Error('Event payload does not match request body');\n      }\n    }\n\n    return event;\n  }\n}\n"],
  "mappings": "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",
  "names": ["verifyEvent"]
}
