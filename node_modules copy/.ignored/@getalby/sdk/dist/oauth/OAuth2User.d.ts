import { RequestOptions } from "./request";
import { AuthHeader, EventName, EventListener, GenerateAuthUrlOptions, OAuthClient, Token } from "./types";
export type OAuth2Scopes = "account:read" | "invoices:create" | "invoices:read" | "transactions:read" | "balance:read" | "payments:send";
export interface OAuth2UserOptions {
    client_id: string;
    client_secret?: string;
    callback: string;
    scopes: OAuth2Scopes[];
    request_options?: Partial<RequestOptions>;
    user_agent: string;
    token?: Token;
}
export declare class OAuth2User implements OAuthClient {
    token?: Token;
    options: OAuth2UserOptions;
    code_verifier?: string;
    code_challenge?: string;
    private _refreshAccessTokenPromise;
    private _tokenEvents;
    constructor(options: OAuth2UserOptions);
    /**
     * Subscribe to the events
     */
    on(eventName: EventName, listener: EventListener): void;
    /**
     * Refresh the access token
     */
    refreshAccessToken(): Promise<{
        token: Token;
    }>;
    /**
     * Check if an access token is expired
     */
    isAccessTokenExpired(): boolean;
    /**
     * Request an access token
     */
    requestAccessToken(code?: string): Promise<{
        token: Token;
    }>;
    generateAuthURL(options?: GenerateAuthUrlOptions): Promise<string>;
    getAuthHeader(): Promise<AuthHeader>;
    private _generateS256Challenge;
}
