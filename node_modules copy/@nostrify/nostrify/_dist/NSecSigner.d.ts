import { NostrEvent } from "@jsr/nostrify__types";
import { NostrSigner } from "@jsr/nostrify__types";
/**
 * NIP-07-compatible signer with secret key. It is a drop-in replacement for `window.nostr`.
 *
 * Usage:
 *
 * ```ts
 * const signer = new NSecSigner(secretKey);
 * const pubkey = await signer.getPublicKey();
 * const event = await signer.signEvent({ kind: 1, content: 'Hello, world!', tags: [], created_at: 0 });
 * ```
 */ export declare class NSecSigner implements NostrSigner {
  private pubkey?: any;
  constructor(secretKey: Uint8Array);
  getPublicKey(): Promise<string>;
  signEvent(event: Omit<NostrEvent, 'id' | 'pubkey' | 'sig'>): Promise<NostrEvent>;
  readonly nip04: {
    encrypt: (pubkey: string, plaintext: string) => Promise<string>;
    decrypt: (pubkey: string, ciphertext: string) => Promise<string>;
  };
  readonly nip44: {
    encrypt: (pubkey: string, plaintext: string) => Promise<string>;
    decrypt: (pubkey: string, ciphertext: string) => Promise<string>;
  };
}
//# sourceMappingURL=NSecSigner.d.ts.map