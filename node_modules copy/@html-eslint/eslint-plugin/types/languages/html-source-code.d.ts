export type Program = import("eslint").AST.Program;
export type SourceLocation = import("@eslint/plugin-kit").SourceLocation;
export type DirectiveType = import("@eslint/plugin-kit").DirectiveType;
export type TraversalStep = import("@eslint/core").TraversalStep;
export type CommentContent = import("@html-eslint/types").CommentContent;
export type AnyHTMLNode = import("@html-eslint/types").AnyHTMLNode;
export type Position = import("@eslint/core").Position;
export type BaseNode = import("../types").BaseNode;
export class HTMLSourceCode extends TextSourceCodeBase<import("@eslint/core").SourceCodeBaseTypeOptions & {
    SyntaxElementWithLoc: object;
}> {
    /**
     * @param {{ast: Program, text: string, comments: CommentContent[]}} config
     */
    constructor({ ast, text, comments }: {
        ast: Program;
        text: string;
        comments: CommentContent[];
    });
    /**
     * @property
     */
    ast: import("eslint").AST.Program;
    /**
     * @property
     */
    comments: import("@html-eslint/types").CommentContent[];
    parentsMap: Map<any, any>;
    lineStartIndices: number[];
    /**
     * @param {BaseNode} node
     * @returns {[number, number]}
     */
    getRange(node: BaseNode): [number, number];
    /**
     * @param {BaseNode} node
     * @returns {import("@eslint/plugin-kit").SourceLocation}
     */
    getLoc(node: BaseNode): import("@eslint/plugin-kit").SourceLocation;
    getLines(): string[];
    /**
     * @see https://github.com/eslint/eslint/blob/f60f2764971a33e252be13e560dccf21f554dbf1/lib/languages/js/source-code/source-code.js#L745
     * @param {Position} loc
     * @returns {number}
     */
    getIndexFromLoc(loc: Position): number;
    /**
     * @see https://github.com/eslint/eslint/blob/f60f2764971a33e252be13e560dccf21f554dbf1/lib/languages/js/source-code/source-code.js#L694
     * @param {number} index
     * @returns {Position}
     */
    getLocFromIndex(index: number): Position;
    getInlineConfigNodes(): import("@html-eslint/types").CommentContent[];
    getDisableDirectives(): {
        problems: {
            ruleId: null | string;
            message: string;
            loc: SourceLocation;
        }[];
        directives: Directive[];
    };
    traverse(): import("@eslint/core").TraversalStep[];
    /**
     * @param {AnyHTMLNode} node
     * @returns
     */
    getParent(node: AnyHTMLNode): any;
}
import { TextSourceCodeBase } from "@eslint/plugin-kit";
import { Directive } from "@eslint/plugin-kit";
//# sourceMappingURL=html-source-code.d.ts.map