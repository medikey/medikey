import { type NPool } from "@jsr/nostrify__nostrify";
/** An object represeting any supported Nostr login credentials. */ export type NLoginType = NLoginNsec | NLoginBunker | NLoginExtension | NLoginOther;
/** Nostr login with nsec. */ export type NLoginNsec = NLoginBase<'nsec', {
  nsec: `nsec1${string}`;
}>;
/** NIP-46 (aka remote signer) login. */ export type NLoginBunker = NLoginBase<'bunker', {
  bunkerPubkey: string;
  clientNsec: `nsec1${string}`;
  relays: string[];
}>;
/** NIP-07 (browser extension) login. */ export type NLoginExtension = NLoginBase<'extension', null>;
/** Additional login types created by the library user. */ export type NLoginOther = NLoginBase<`x-${string}`, {
  [key: string]: unknown;
}>;
/** Base properties shared by Nostr login objects. */ interface NLoginBase<T extends string, D> {
  id: string;
  type: T;
  pubkey: string;
  createdAt: string;
  data: D;
}
/** Class representing Nostr login credentials. */ export declare class NLogin<T extends string, D> implements NLoginBase<T, D> {
  public id: string;
  public type: T;
  public pubkey: string;
  public createdAt: string;
  public data: D;
  constructor(type: T, pubkey: string, data: D);
  /** Create a login object from an nsec. */ static fromNsec(nsec: string): NLoginNsec;
  /** Create a login object from a bunker URI. */ static fromBunker(uri: string, pool: NPool): Promise<NLoginBunker>;
  /** Create a login object from a browser extension. */ static fromExtension(): Promise<NLoginExtension>;
  /** Convert to a JSON-serializable object. */ toJSON(): NLoginBase<T, D>;
}
//# sourceMappingURL=NLogin.d.ts.map