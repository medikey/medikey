/**
 * @import { Language, ParseResult, File, FileError, OkParseResult } from "@eslint/core";
 * @import { ParserOptions } from "@html-eslint/parser";
 * @import { AST } from "eslint";
 */
/**
 * @implements {Language<{ LangOptions: ParserOptions; Code: HTMLSourceCode; RootNode: AST.Program; Node: {}}>}
 */
export class HTMLLanguage implements Language {
    /**
     * @property
     * @type {"text"}
     */
    fileType: "text";
    /**
     * @property
     * @type {0|1}
     */
    lineStart: 0 | 1;
    /**
     * @property
     * @type {0|1}
     */
    columnStart: 0 | 1;
    /**
     * @type {string}
     */
    nodeTypeKey: string;
    /**
     * The visitor keys for the es-html-parser AST.
     * @type {Record<string, string[]>}
     */
    visitorKeys: Record<string, string[]>;
    /**
     * @param {ParserOptions} languageOptions
     */
    validateLanguageOptions(languageOptions: ParserOptions): void;
    /**
     * @param {File} file
     * @param {Object} [context]
     * @param {ParserOptions} context.languageOptions
     * @returns {ParseResult<AST.Program>}
     */
    parse(file: File, context?: {
        languageOptions: ParserOptions;
    }): ParseResult<AST.Program>;
    /**
     * @param {File} file
     * @param {OkParseResult<AST.Program>} parseResult
     */
    createSourceCode(file: File, parseResult: OkParseResult<AST.Program>): HTMLSourceCode;
}
import type { Language } from "@eslint/core";
import type { ParserOptions } from "@html-eslint/parser";
import type { File } from "@eslint/core";
import type { AST } from "eslint";
import type { ParseResult } from "@eslint/core";
import type { OkParseResult } from "@eslint/core";
import { HTMLSourceCode } from "./html-source-code";
//# sourceMappingURL=html-language.d.ts.map