/**
 * Infinite async generator. Iterates messages pushed to it until closed.
 * Only one consumer is expected to use a Machina instance at a time.
 *
 * @example
 * ```ts
 * // Create the Machina instance
 * const machina = new Machina<string>();
 *
 * // Async generator loop
 * async function getMessages() {
 *   for await (const msg of machina.stream()) {
 *     console.log(msg);
 *   }
 * }
 *
 * // Start the generator
 * getMessages();
 *
 * // Push messages to it
 * machina.push('hello!');
 * machina.push('whats up?');
 * machina.push('greetings');
 * ```
 */ export declare class Machina<T> implements AsyncIterable<T> {
  constructor(signal?: AbortSignal);
  /** Push a message into the Machina instance, making it available to the consumer of `stream()`. */ push(data: T): void;
  private abort: any;
}
//# sourceMappingURL=Machina.d.ts.map