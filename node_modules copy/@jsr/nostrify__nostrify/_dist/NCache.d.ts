import { NostrEvent, NostrFilter, NostrRelayCOUNT, NStore } from "@jsr/nostrify__types";
import { LRUCache } from "lru-cache";
import { NSet } from "./NSet.js";
/**
 * Nostr LRU cache based on [`npm:lru-cache`](https://www.npmjs.com/package/lru-cache).
 * It implements both `NStore` and `NSet` interfaces.
 *
 * ```ts
 * // Accepts the options of `npm:lru-cache`:
 * const cache = new NCache({ max: 1000 });
 *
 * // Events can be added like a regular `Set`:
 * cache.add(event1);
 * cache.add(event2);
 *
 * // Can be queried like `NStore`:
 * const events = await cache.query([{ kinds: [1] }]);
 *
 * // Can be iterated like `NSet`:
 * for (const event of cache) {
 *  console.log(event);
 * }
 * ```
 */ declare class NCache extends NSet implements NStore {
  constructor(...args: ConstructorParameters<typeof LRUCache<string, NostrEvent>>);
  event(event: NostrEvent): Promise<void>;
  query(filters: NostrFilter[]): Promise<NostrEvent[]>;
  remove(filters: NostrFilter[]): Promise<void>;
  count(filters: NostrFilter[]): Promise<NostrRelayCOUNT[2]>;
}
export { NCache };
//# sourceMappingURL=NCache.d.ts.map