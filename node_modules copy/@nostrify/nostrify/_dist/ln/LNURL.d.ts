import { NostrEvent } from "@jsr/nostrify__types";
import { LNURLCallback } from "./types/LNURLCallback.js";
import { LNURLDetails } from "./types/LNURLDetails.js";
import { z } from "../NSchema.js";
/**
 * Represents an LNURL, with methods to fetch details and generate invoices.
 */ export declare class LNURL {
  /** Underlying HTTP(s) URL of the user. */ readonly url: URL;
  /** Fetch function to use for HTTP requests. */ private fetch: any;
  constructor(/** Underlying HTTP(s) URL of the user. */ url: URL, /** Options for the LNURL class. */ opts?: {
    /** Fetch function to use for HTTP requests. */ fetch: typeof globalThis.fetch;
  });
  /**
   * Create an LNURL object from a bech32 `lnurl1...` string.
   * Throws if the value is not a valid lnurl.
   */ static fromString(value: string, opts?: {
    fetch: typeof globalThis.fetch;
  }): LNURL;
  /**
   * Create an LNURL object from a lightning address (email-like format).
   * Throws if the value is not a valid lightning address.
   */ static fromLightningAddress(ln: string, opts?: {
    fetch: typeof globalThis.fetch;
  }): LNURL;
  /** Returns the LNURL object as a bech32-encoded `lnurl1...` string. */ toString(): `lnurl1${string}`;
  /** Resolve an LNURL to its details. */ getDetails(opts?: {
    signal?: AbortSignal;
  }): Promise<LNURLDetails>;
  /** Generate an LNURL invoice from the params. */ getInvoice(opts: {
    /** Amount in millisatoshis to send to the user. */ amount: number;
    /** NIP-57 Zap Request (kind 9734) event. */ nostr?: NostrEvent;
    /** Signal to abort the request. */ signal?: AbortSignal;
  }): Promise<LNURLCallback>;
  /** LNURL response schema. */ static lnurlDetailsSchema(): z.ZodType<LNURLDetails>;
  /** LNURL callback schema. */ static lnurlCallbackSchema(): z.ZodType<LNURLCallback>;
}
//# sourceMappingURL=LNURL.d.ts.map