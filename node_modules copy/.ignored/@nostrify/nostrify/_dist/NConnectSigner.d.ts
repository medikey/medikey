import { NostrEvent, NostrSigner, NRelay } from "@jsr/nostrify__types";
/** Options for `NConnectSigner`. */ export interface NConnectSignerOpts {
  /** Relay to facilitate connection. */ relay: NRelay;
  /** Remote pubkey to sign as. */ pubkey: string;
  /** Local signer to sign the request events. */ signer: NostrSigner;
  /** Timeout for requests. */ timeout?: number;
  /** Encryption to use when encrypting local messages. Decryption is automatic. */ encryption?: 'nip04' | 'nip44';
}
/** [NIP-46](https://github.com/nostr-protocol/nips/blob/master/46.md) remote signer through a relay. */ export declare class NConnectSigner implements NostrSigner {
  private relay: any;
  private pubkey: any;
  private signer: any;
  private timeout?: any;
  private encryption: any;
  constructor({}: NConnectSignerOpts);
  getPublicKey(): Promise<string>;
  signEvent(event: Omit<NostrEvent, 'id' | 'pubkey' | 'sig'>): Promise<NostrEvent>;
  getRelays(): Promise<Record<string, {
    read: boolean;
    write: boolean;
  }>>;
  readonly nip04: {
    encrypt: (pubkey: string, plaintext: string) => Promise<string>;
    decrypt: (pubkey: string, ciphertext: string) => Promise<string>;
  };
  readonly nip44: {
    encrypt: (pubkey: string, plaintext: string) => Promise<string>;
    decrypt: (pubkey: string, ciphertext: string) => Promise<string>;
  };
  /** Send a `connect` command to the relay. It should respond with `ack`. */ connect(secret?: string): Promise<string>;
  /** Send a `ping` command to the signer. It should respond with `pong`. */ ping(): Promise<string>;
  private cmd: any;
  private send: any;
  private encrypt: any;
  private decrypt: any;
}
//# sourceMappingURL=NConnectSigner.d.ts.map