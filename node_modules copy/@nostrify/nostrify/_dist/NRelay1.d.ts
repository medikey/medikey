import { NostrClientMsg, NostrClientREQ, NostrEvent, NostrFilter, NostrRelayCLOSED, NostrRelayEOSE, NostrRelayEVENT, NostrRelayMsg, NRelay } from "@jsr/nostrify__types";
import { Backoff, Websocket } from "websocket-ts";
/** Options used for constructing an `NRelay1` instance. */ export interface NRelay1Opts {
  /** Respond to `AUTH` challenges by producing a signed kind `22242` event. */ auth?(challenge: string): Promise<NostrEvent>;
  /** Configure reconnection strategy, or set to `false` to disable. Default: `new ExponentialBackoff(1000)`. */ backoff?: Backoff | false;
  /** How long to wait (in milliseconds) for the caller to create a subscription before closing the connection. Set to `false` to disable. Default: `30_000`. */ idleTimeout?: number | false;
  /** Ensure the event is valid before returning it. Default: `nostrTools.verifyEvent`. */ verifyEvent?(event: NostrEvent): boolean;
  /** Logger callback. */ log?(log: NRelay1Log): void;
}
export interface NRelay1Log {
  level: 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal' | 'critical';
  ns: string;
  [k: string]: JsonValue | undefined | {
    toJSON(): JsonValue;
  } | Error;
}
/** Single relay connection over WebSocket. */ export declare class NRelay1 implements NRelay {
  private url: any;
  private opts: any;
  socket: Websocket;
  private subs: any;
  private closedByUser: any;
  private idleTimer?: any;
  private controller: any;
  private ee: any;
  get subscriptions(): readonly NostrClientREQ[];
  private log: any;
  constructor(url: string, opts?: NRelay1Opts);
  private createSocket: any;
  /** Handle a NIP-01 relay message. */ protected receive(msg: NostrRelayMsg): void;
  /** Send a NIP-01 client message to the relay. */ protected send(msg: NostrClientMsg): void;
  req(filters: NostrFilter[], opts?: {
    signal?: AbortSignal;
  }): AsyncGenerator<NostrRelayEVENT | NostrRelayEOSE | NostrRelayCLOSED>;
  query(filters: NostrFilter[], opts?: {
    signal?: AbortSignal;
  }): Promise<NostrEvent[]>;
  event(event: NostrEvent, opts?: {
    signal?: AbortSignal;
  }): Promise<void>;
  count(filters: NostrFilter[], opts?: {
    signal?: AbortSignal;
  }): Promise<{
    count: number;
    approximate?: boolean;
  }>;
  private on: any;
  private once: any;
  protected abortError(): DOMException;
  private maybeStartIdleTimer: any;
  private stopIdleTimer: any;
  private wake: any;
  /**
   * Close the relay connection and prevent it from reconnecting.
   * After this you should dispose of the `NRelay1` instance and create a new one to connect again.
   */ close(): Promise<void>;
}
/** Native JSON primitive value, including objects and arrays. */ type JsonValue = {
  [key: string]: JsonValue | undefined;
} | JsonValue[] | string | number | boolean | null;
//# sourceMappingURL=NRelay1.d.ts.map