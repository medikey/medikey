import { SignMessageResponse } from "@webbtc/webln-types";
import { RequestOptions } from "./request";
import { AuthClient, BaseWebhookEndpointResponse, CreateSwapParams, CreateSwapResponse, CreateWebhookEndpointParams, CreateWebhookEndpointResponse, DecodedInvoice, GetAccountBalanceResponse, GetAccountInformationResponse, GetInvoicesRequestParams, Invoice, InvoiceRequestParams, KeysendRequestParams, SendBoostagramRequestParams, SendPaymentRequestParams, SendPaymentResponse, SendBoostagramToAlbyRequestParams, SwapInfoResponse, SignMessageRequestParams } from "./types";
export declare class Client {
    auth: AuthClient;
    defaultRequestOptions?: Partial<RequestOptions>;
    constructor(auth: string | AuthClient, requestOptions?: Partial<RequestOptions>);
    accountBalance(params: {}, request_options?: Partial<RequestOptions>): Promise<GetAccountBalanceResponse>;
    signMessage(message: SignMessageRequestParams, request_options?: Partial<RequestOptions>): Promise<SignMessageResponse>;
    accountSummary(params: {}, request_options?: Partial<RequestOptions>): Promise<any>;
    accountInformation(params: {}, request_options?: Partial<RequestOptions>): Promise<GetAccountInformationResponse>;
    accountValue4Value(params: {}, request_options?: Partial<RequestOptions>): Promise<any>;
    incomingInvoices(params: GetInvoicesRequestParams, request_options?: Partial<RequestOptions>): Promise<Invoice[]>;
    outgoingInvoices(params: GetInvoicesRequestParams, request_options?: Partial<RequestOptions>): Promise<Invoice[]>;
    invoices(params: GetInvoicesRequestParams, request_options?: Partial<RequestOptions>): Promise<Invoice[]>;
    getInvoice(paymentHash: string, request_options?: Partial<RequestOptions>): Promise<Invoice>;
    decodeInvoice(paymentRequest: string, request_options?: Partial<RequestOptions>): Promise<DecodedInvoice>;
    createInvoice(invoice: InvoiceRequestParams, request_options?: Partial<RequestOptions>): Promise<Invoice>;
    keysend(args: KeysendRequestParams | KeysendRequestParams[], request_options?: Partial<RequestOptions>): Promise<SendPaymentResponse>;
    sendPayment(params: SendPaymentRequestParams, request_options?: Partial<RequestOptions>): Promise<SendPaymentResponse>;
    sendBoostagram(args: SendBoostagramRequestParams | SendBoostagramRequestParams[], request_options?: Partial<RequestOptions>): Promise<any>;
    sendBoostagramToAlbyAccount(args: SendBoostagramToAlbyRequestParams, request_options?: Partial<RequestOptions>): Promise<any>;
    createWebhookEndpoint(params: CreateWebhookEndpointParams, request_options?: Partial<RequestOptions>): Promise<CreateWebhookEndpointResponse>;
    deleteWebhookEndpoint(id: string, request_options?: Partial<RequestOptions>): Promise<BaseWebhookEndpointResponse>;
    getSwapInfo(request_options?: Partial<RequestOptions>): Promise<SwapInfoResponse>;
    createSwap(params: CreateSwapParams, request_options?: Partial<RequestOptions>): Promise<CreateSwapResponse>;
}
