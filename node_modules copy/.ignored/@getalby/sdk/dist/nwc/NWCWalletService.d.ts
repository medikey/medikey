import { Event, EventTemplate, Relay } from "nostr-tools";
import { Nip47NotificationType, Nip47SingleMethod, Nip47EncryptionType } from "./types";
import { NWCWalletServiceRequestHandler } from "./NWCWalletServiceRequestHandler";
export type NewNWCWalletServiceOptions = {
    relayUrl: string;
};
export declare class NWCWalletServiceKeyPair {
    walletSecret: string;
    walletPubkey: string;
    clientPubkey: string;
    constructor(walletSecret: string, clientPubkey: string);
}
export declare class NWCWalletService {
    relay: Relay;
    relayUrl: string;
    constructor(options: NewNWCWalletServiceOptions);
    publishWalletServiceInfoEvent(walletSecret: string, supportedMethods: Nip47SingleMethod[], supportedNotifications: Nip47NotificationType[]): Promise<void>;
    subscribe(keypair: NWCWalletServiceKeyPair, handler: NWCWalletServiceRequestHandler): Promise<() => void>;
    get connected(): boolean;
    signEvent(event: EventTemplate, secretKey: string): Promise<Event>;
    close(): void;
    encrypt(keypair: NWCWalletServiceKeyPair, content: string, encryptionType: Nip47EncryptionType): Promise<string>;
    decrypt(keypair: NWCWalletServiceKeyPair, content: string, encryptionType: Nip47EncryptionType): Promise<string>;
    private _checkConnected;
}
