import { BunkerURI, NConnectSigner, NSecSigner } from "@jsr/nostrify__nostrify";
import { generateSecretKey, getPublicKey, nip19 } from "nostr-tools";
/** Class representing Nostr login credentials. */ export class NLogin {
  id;
  type;
  pubkey;
  createdAt;
  data;
  constructor(type, pubkey, data){
    this.id = `${type}:${pubkey}`;
    this.type = type;
    this.pubkey = pubkey;
    this.createdAt = new Date().toISOString();
    this.data = data;
  }
  /** Create a login object from an nsec. */ static fromNsec(nsec) {
    const decoded = nip19.decode(nsec);
    if (decoded.type !== 'nsec') {
      throw new Error('Invalid nsec');
    }
    const sk = decoded.data;
    const pubkey = getPublicKey(sk);
    return new NLogin('nsec', pubkey, {
      nsec: nip19.nsecEncode(sk)
    });
  }
  /** Create a login object from a bunker URI. */ static async fromBunker(uri, pool) {
    const { pubkey: bunkerPubkey, secret, relays } = new BunkerURI(uri);
    if (!relays.length) {
      throw new Error('No relay provided');
    }
    const sk = generateSecretKey();
    const nsec = nip19.nsecEncode(sk);
    const clientSigner = new NSecSigner(sk);
    const signer = new NConnectSigner({
      relay: pool.group(relays),
      pubkey: bunkerPubkey,
      signer: clientSigner,
      timeout: 60_000
    });
    await signer.connect(secret);
    const pubkey = await signer.getPublicKey();
    return new NLogin('bunker', pubkey, {
      bunkerPubkey,
      clientNsec: nsec,
      relays
    });
  }
  /** Create a login object from a browser extension. */ static async fromExtension() {
    const windowSigner = globalThis.nostr;
    if (!windowSigner) {
      throw new Error('Nostr extension is not available');
    }
    const pubkey = await windowSigner.getPublicKey();
    return new NLogin('extension', pubkey, null);
  }
  /** Convert to a JSON-serializable object. */ toJSON() {
    return {
      id: this.id,
      type: this.type,
      pubkey: this.pubkey,
      createdAt: this.createdAt,
      data: this.data
    };
  }
}
//# sourceMappingURL=NLogin.js.map