{
  "version": 3,
  "sources": ["../../.pnpm/@jsr+nostrify__react@0.2.9_typescript@5.9.2/node_modules/@jsr/nostrify__react/login/NLogin.ts", "../../.pnpm/@jsr+nostrify__react@0.2.9_typescript@5.9.2/node_modules/@jsr/nostrify__react/login/NostrLoginProvider.ts", "../../.pnpm/@jsr+nostrify__react@0.2.9_typescript@5.9.2/node_modules/@jsr/nostrify__react/login/NostrLoginContext.ts", "../../.pnpm/@jsr+nostrify__react@0.2.9_typescript@5.9.2/node_modules/@jsr/nostrify__react/login/useNostrLoginReducer.ts", "../../.pnpm/@jsr+nostrify__react@0.2.9_typescript@5.9.2/node_modules/@jsr/nostrify__react/login/nostrLoginReducer.ts", "../../.pnpm/@jsr+nostrify__react@0.2.9_typescript@5.9.2/node_modules/@jsr/nostrify__react/login/NUser.ts", "../../.pnpm/@jsr+nostrify__react@0.2.9_typescript@5.9.2/node_modules/@jsr/nostrify__react/login/useNostrLogin.ts"],
  "sourcesContent": ["import { BunkerURI, NConnectSigner, type NostrSigner, type NPool, NSecSigner } from '@jsr/nostrify__nostrify';\nimport { generateSecretKey, getPublicKey, nip19 } from 'nostr-tools';\n\n/** An object represeting any supported Nostr login credentials. */\nexport type NLoginType = NLoginNsec | NLoginBunker | NLoginExtension | NLoginOther;\n\n/** Nostr login with nsec. */\nexport type NLoginNsec = NLoginBase<'nsec', {\n  nsec: `nsec1${string}`;\n}>;\n\n/** NIP-46 (aka remote signer) login. */\nexport type NLoginBunker = NLoginBase<'bunker', {\n  bunkerPubkey: string;\n  clientNsec: `nsec1${string}`;\n  relays: string[];\n}>;\n\n/** NIP-07 (browser extension) login. */\nexport type NLoginExtension = NLoginBase<'extension', null>;\n\n/** Additional login types created by the library user. */\nexport type NLoginOther = NLoginBase<`x-${string}`, {\n  [key: string]: unknown;\n}>;\n\n/** Base properties shared by Nostr login objects. */\ninterface NLoginBase<T extends string, D> {\n  id: string;\n  type: T;\n  pubkey: string;\n  createdAt: string;\n  data: D;\n}\n\n/** Class representing Nostr login credentials. */\nexport class NLogin<T extends string, D> implements NLoginBase<T, D> {\n  public id: string;\n  public type: T;\n  public pubkey: string;\n  public createdAt: string;\n  public data: D;\n\n  constructor(type: T, pubkey: string, data: D) {\n    this.id = `${type}:${pubkey}`;\n    this.type = type;\n    this.pubkey = pubkey;\n    this.createdAt = new Date().toISOString();\n    this.data = data;\n  }\n\n  /** Create a login object from an nsec. */\n  static fromNsec(nsec: string): NLoginNsec {\n    const decoded = nip19.decode(nsec);\n\n    if (decoded.type !== 'nsec') {\n      throw new Error('Invalid nsec');\n    }\n\n    const sk = decoded.data;\n    const pubkey = getPublicKey(sk);\n\n    return new NLogin('nsec', pubkey, {\n      nsec: nip19.nsecEncode(sk),\n    });\n  }\n\n  /** Create a login object from a bunker URI. */\n  static async fromBunker(uri: string, pool: NPool): Promise<NLoginBunker> {\n    const { pubkey: bunkerPubkey, secret, relays } = new BunkerURI(uri);\n\n    if (!relays.length) {\n      throw new Error('No relay provided');\n    }\n\n    const sk = generateSecretKey();\n    const nsec = nip19.nsecEncode(sk);\n    const clientSigner = new NSecSigner(sk);\n\n    const signer = new NConnectSigner({\n      relay: pool.group(relays),\n      pubkey: bunkerPubkey,\n      signer: clientSigner,\n      timeout: 60_000,\n    });\n\n    await signer.connect(secret);\n    const pubkey = await signer.getPublicKey();\n\n    return new NLogin('bunker', pubkey, {\n      bunkerPubkey,\n      clientNsec: nsec,\n      relays,\n    });\n  }\n\n  /** Create a login object from a browser extension. */\n  static async fromExtension(): Promise<NLoginExtension> {\n    const windowSigner = (globalThis as unknown as { nostr?: NostrSigner }).nostr;\n\n    if (!windowSigner) {\n      throw new Error('Nostr extension is not available');\n    }\n\n    const pubkey = await windowSigner.getPublicKey();\n\n    return new NLogin('extension', pubkey, null);\n  }\n\n  /** Convert to a JSON-serializable object. */\n  toJSON(): NLoginBase<T, D> {\n    return {\n      id: this.id,\n      type: this.type,\n      pubkey: this.pubkey,\n      createdAt: this.createdAt,\n      data: this.data,\n    };\n  }\n}\n", "import { jsx } from 'react/jsx-runtime';\n\nimport { NostrLoginContext, NostrLoginContextType } from './NostrLoginContext.js';\nimport { useNostrLoginReducer } from './useNostrLoginReducer.js';\n\nimport type { FC, ReactNode } from 'npm:react@^18.0.0';\n\n/** Props for `NostrLoginProvider`. */\ninterface NostrLoginProviderProps {\n  /** The child components that will have access to the context. */\n  children: ReactNode;\n  /** The key used to store (and revive) the logins in localStorage. */\n  storageKey: string;\n}\n\n/**\n * NostrLoginProvider is a React component that provides a context for managing Nostr logins.\n * It uses a reducer to handle the state of logins and stores them in localStorage.\n */\nexport const NostrLoginProvider: FC<NostrLoginProviderProps> = ({ children, storageKey }: NostrLoginProviderProps) => {\n  const [logins, dispatch] = useNostrLoginReducer(storageKey);\n\n  const value: NostrLoginContextType = {\n    logins,\n    addLogin: (login) => dispatch({ type: 'login.add', login }),\n    removeLogin: (id) => dispatch({ type: 'login.remove', id }),\n    setLogin: (id) => dispatch({ type: 'login.set', id }),\n    clearLogins: () => dispatch({ type: 'login.clear' }),\n  };\n\n  return jsx(NostrLoginContext.Provider, { value, children });\n};\n", "import { type Context, createContext } from 'react';\n\nimport type { NLoginType } from './NLogin.ts';\n\n/**\n * NostrLoginContextType defines the shape of the context that will be provided\n * to components that need access to the Nostr login state.\n */\nexport type NostrLoginContextType = {\n  /** The list of Nostr logins. */\n  logins: readonly NLoginType[];\n  /** Dispatch an action to add a login to the state. */\n  addLogin: (login: NLoginType) => void;\n  /** Dispatch an action to remove a login from the state. */\n  removeLogin: (loginId: string) => void;\n  /** Dispatch an action to set the user's current login (by moving it to the top of the state). */\n  setLogin: (loginId: string) => void;\n  /** Dispatch an action to clear the login state. */\n  clearLogins: () => void;\n};\n\n/**\n * NostrLoginContext is a React context that provides access to the Nostr login state and\n * a dispatch function to update the state.\n */\nexport const NostrLoginContext: Context<NostrLoginContextType | undefined> = createContext<\n  NostrLoginContextType | undefined\n>(undefined);\n", "import { useEffect, useReducer } from 'react';\n\nimport { type NLoginAction, nostrLoginReducer } from './nostrLoginReducer.js';\n\nimport type { NLoginType } from './NLogin.ts';\n\nexport function useNostrLoginReducer(\n  storageKey: string,\n): [state: NLoginType[], dispatch: (action: NLoginAction) => void] {\n  const [state, dispatch] = useReducer(nostrLoginReducer, [], () => {\n    const stored = localStorage.getItem(storageKey);\n    return stored ? JSON.parse(stored) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(storageKey, JSON.stringify(state));\n  }, [state]);\n\n  return [state, dispatch];\n}\n", "import type { NLoginType } from './NLogin.ts';\n\nexport type NLoginAction =\n  | { type: 'login.add'; login: NLoginType; set?: boolean }\n  | { type: 'login.remove'; id: string }\n  | { type: 'login.set'; id: string }\n  | { type: 'login.clear' };\n\nexport function nostrLoginReducer(state: NLoginType[], action: NLoginAction): NLoginType[] {\n  switch (action.type) {\n    case 'login.add': {\n      const filtered = state.filter((login) => login.id !== action.login.id);\n      return action.set ? [action.login, ...filtered] : [...filtered, action.login];\n    }\n\n    case 'login.remove': {\n      return state.filter((login) => login.id !== action.id);\n    }\n\n    case 'login.set': {\n      const login = state.find((login) => login.id === action.id);\n\n      if (!login) {\n        return state;\n      }\n\n      const filtered = state.filter((login) => login.id !== action.id);\n      return [login, ...filtered];\n    }\n\n    case 'login.clear': {\n      return [];\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n", "import { NBrowserSigner, NConnectSigner, type NostrSigner, type NPool, NSecSigner } from '@jsr/nostrify__nostrify';\nimport { nip19 } from 'nostr-tools';\n\nimport type { NLoginBunker, NLoginExtension, NLoginNsec } from './NLogin.ts';\n\n/** Represents a Nostr user with authentication credentials. */\nexport class NUser {\n  constructor(\n    /** The authentication method used for this user */\n    readonly method: 'nsec' | 'bunker' | 'extension' | `x-${string}`,\n    /** The public key of the user in hex format. */\n    readonly pubkey: string,\n    /** The signer that can sign events on behalf of this user. */\n    readonly signer: NostrSigner,\n  ) {}\n\n  static fromNsecLogin(login: NLoginNsec): NUser {\n    const sk = nip19.decode(login.data.nsec) as { type: 'nsec'; data: Uint8Array };\n\n    return new NUser(\n      login.type,\n      login.pubkey,\n      new NSecSigner(sk.data),\n    );\n  }\n\n  static fromBunkerLogin(login: NLoginBunker, pool: NPool): NUser {\n    const clientSk = nip19.decode(login.data.clientNsec) as { type: 'nsec'; data: Uint8Array };\n    const clientSigner = new NSecSigner(clientSk.data);\n\n    return new NUser(\n      login.type,\n      login.pubkey,\n      new NConnectSigner({\n        relay: pool.group(login.data.relays),\n        pubkey: login.pubkey,\n        signer: clientSigner,\n        timeout: 60_000,\n      }),\n    );\n  }\n\n  static fromExtensionLogin(login: NLoginExtension): NUser {\n    return new NUser(\n      login.type,\n      login.pubkey,\n      new NBrowserSigner(),\n    );\n  }\n}\n", "import { useContext } from 'react';\n\nimport { NostrLoginContext, type NostrLoginContextType } from './NostrLoginContext.js';\n\nexport function useNostrLogin(): NostrLoginContextType {\n  const context = useContext(NostrLoginContext);\n\n  if (!context) {\n    throw new Error('useNostrLogin must be used within a NostrLoginProvider');\n  }\n\n  return context;\n}\n"],
  "mappings": "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",
  "names": ["import_react", "login", "import_react"]
}
