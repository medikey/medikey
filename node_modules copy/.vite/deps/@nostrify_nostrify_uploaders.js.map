{
  "version": 3,
  "sources": ["../../.pnpm/@jsr+nostrify__nostrify@0.46.5_typescript@5.9.2/node_modules/@jsr/nostrify__nostrify/uploaders/BlossomUploader.ts", "../../.pnpm/@jsr+nostrify__nostrify@0.46.5_typescript@5.9.2/node_modules/@jsr/nostrify__nostrify/uploaders/NostrBuildUploader.ts"],
  "sourcesContent": ["import { NostrSigner, NUploader } from '@jsr/nostrify__types';\nimport { encodeHex } from '@jsr/std__encoding/hex';\nimport { z } from 'zod';\n\nimport { N64 } from '../utils/N64.js';\n\n/** BlossomUploader options. */\nexport interface BlossomUploaderOpts {\n  /** Blossom servers to use. */\n  servers: Request['url'][];\n  /** Signer for Blossom authorizations. */\n  signer: NostrSigner;\n  /** Custom fetch implementation. */\n  fetch?: typeof fetch;\n  /** Number of milliseconds until each request should expire. (Default: `60_000`) */\n  expiresIn?: number;\n}\n\n/** Upload files to Blossom servers. */\nexport class BlossomUploader implements NUploader {\n  private servers: Request['url'][];\n  private signer: NostrSigner;\n  private fetch: typeof fetch;\n  private expiresIn: number;\n\n  constructor(opts: BlossomUploaderOpts) {\n    this.servers = opts.servers;\n    this.signer = opts.signer;\n    this.fetch = opts.fetch ?? globalThis.fetch.bind(globalThis);\n    this.expiresIn = opts.expiresIn ?? 60_000;\n  }\n\n  async upload(file: File, opts?: { signal?: AbortSignal }): Promise<[['url', string], ...string[][]]> {\n    const x = encodeHex(await crypto.subtle.digest('SHA-256', await file.arrayBuffer()));\n\n    const now = Date.now();\n    const expiration = now + this.expiresIn;\n\n    const event = await this.signer.signEvent({\n      kind: 24242,\n      content: `Upload ${file.name}`,\n      created_at: Math.floor(now / 1000),\n      tags: [\n        ['t', 'upload'],\n        ['x', x],\n        ['size', file.size.toString()],\n        ['expiration', Math.floor(expiration / 1000).toString()],\n      ],\n    });\n\n    const authorization = `Nostr ${N64.encodeEvent(event)}`;\n\n    return Promise.any(this.servers.map(async (server) => {\n      const url = new URL('/upload', server);\n\n      const response = await this.fetch(url, {\n        method: 'PUT',\n        body: file,\n        headers: {\n          authorization,\n          'content-type': file.type,\n        },\n        signal: opts?.signal,\n      });\n\n      const json = await response.json();\n      const data = BlossomUploader.schema().parse(json);\n\n      const tags: [['url', string], ...string[][]] = [\n        ['url', data.url],\n        ['x', data.sha256],\n        ['ox', data.sha256],\n        ['size', data.size.toString()],\n      ];\n\n      if (data.type) {\n        tags.push(['m', data.type]);\n      }\n\n      return tags;\n    }));\n  }\n\n  /** Blossom \"BlobDescriptor\" schema. */\n  private static schema() {\n    return z.object({\n      url: z.string(),\n      sha256: z.string(),\n      size: z.number(),\n      type: z.string().optional(),\n    });\n  }\n}\n", "import { z } from 'zod';\n\nimport { N64 } from '../utils/N64.js';\nimport { NIP98 } from '../NIP98.js';\nimport { NostrSigner } from '@jsr/nostrify__types';\nimport { NUploader } from '@jsr/nostrify__types';\n\n/** NostrBuildUploader options. */\nexport interface NostrBuildUploaderOpts {\n  /** nostr.build endpoint to use. Default: `https://nostr.build/api/v2/upload/files` */\n  endpoint?: string;\n  /** Signer to authenticate with NIP-98 requests. */\n  signer?: NostrSigner;\n  /** Custom fetch implementation. */\n  fetch?: typeof fetch;\n}\n\n/** Upload files to nostr.build or another compatible server. */\nexport class NostrBuildUploader implements NUploader {\n  private endpoint: string;\n  private signer?: NostrSigner;\n  private fetch: typeof fetch;\n\n  constructor(opts?: NostrBuildUploaderOpts) {\n    this.endpoint = opts?.endpoint ?? 'https://nostr.build/api/v2/upload/files';\n    this.signer = opts?.signer;\n    this.fetch = opts?.fetch ?? globalThis.fetch.bind(globalThis);\n  }\n\n  async upload(file: File, opts?: { signal?: AbortSignal }): Promise<[['url', string], ...string[][]]> {\n    const formData = new FormData();\n    formData.append('fileToUpload', file);\n\n    const request = new Request(this.endpoint, {\n      method: 'POST',\n      body: formData,\n      signal: opts?.signal,\n    });\n\n    if (this.signer) {\n      const t = await NIP98.template(request);\n      const event = await this.signer.signEvent(t);\n      request.headers.set('authorization', `Nostr ${N64.encodeEvent(event)}`);\n    }\n\n    const response = await this.fetch(request);\n    const json = await response.json();\n    const [data] = NostrBuildUploader.schema().parse(json).data;\n\n    const tags: [['url', string], ...string[][]] = [\n      ['url', data.url],\n      ['m', data.mime],\n      ['x', data.sha256],\n      ['ox', data.original_sha256],\n      ['size', data.size.toString()],\n    ];\n\n    if (data.dimensions) {\n      tags.push(['dim', `${data.dimensions.width}x${data.dimensions.height}`]);\n    }\n\n    if (data.blurhash) {\n      tags.push(['blurhash', data.blurhash]);\n    }\n\n    return tags;\n  }\n\n  /** nostr.build API response schema. */\n  private static schema() {\n    return z.object({\n      data: z.object({\n        url: z.string().url(),\n        blurhash: z.string().optional().catch(undefined),\n        sha256: z.string(),\n        original_sha256: z.string(),\n        mime: z.string(),\n        size: z.number(),\n        dimensions: z.object({\n          width: z.number().positive(),\n          height: z.number().positive(),\n        }).optional().catch(undefined),\n      }).array().min(1),\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
