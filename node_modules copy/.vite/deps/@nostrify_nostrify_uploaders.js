import {
  N64,
  NIP98,
  encodeHex
} from "./chunk-FVGIGQFM.js";
import "./chunk-K6FHH4DT.js";
import {
  external_exports
} from "./chunk-LCYPAAW2.js";
import "./chunk-UC7MHN2T.js";
import {
  __publicField
} from "./chunk-WOOG5QLI.js";

// node_modules/.pnpm/@jsr+nostrify__nostrify@0.46.5_typescript@5.9.2/node_modules/@jsr/nostrify__nostrify/uploaders/BlossomUploader.js
var BlossomUploader = class _BlossomUploader {
  constructor(opts) {
    __publicField(this, "servers");
    __publicField(this, "signer");
    __publicField(this, "fetch");
    __publicField(this, "expiresIn");
    this.servers = opts.servers;
    this.signer = opts.signer;
    this.fetch = opts.fetch ?? globalThis.fetch.bind(globalThis);
    this.expiresIn = opts.expiresIn ?? 6e4;
  }
  async upload(file, opts) {
    const x = encodeHex(await crypto.subtle.digest("SHA-256", await file.arrayBuffer()));
    const now = Date.now();
    const expiration = now + this.expiresIn;
    const event = await this.signer.signEvent({
      kind: 24242,
      content: `Upload ${file.name}`,
      created_at: Math.floor(now / 1e3),
      tags: [
        [
          "t",
          "upload"
        ],
        [
          "x",
          x
        ],
        [
          "size",
          file.size.toString()
        ],
        [
          "expiration",
          Math.floor(expiration / 1e3).toString()
        ]
      ]
    });
    const authorization = `Nostr ${N64.encodeEvent(event)}`;
    return Promise.any(this.servers.map(async (server) => {
      const url = new URL("/upload", server);
      const response = await this.fetch(url, {
        method: "PUT",
        body: file,
        headers: {
          authorization,
          "content-type": file.type
        },
        signal: opts == null ? void 0 : opts.signal
      });
      const json = await response.json();
      const data = _BlossomUploader.schema().parse(json);
      const tags = [
        [
          "url",
          data.url
        ],
        [
          "x",
          data.sha256
        ],
        [
          "ox",
          data.sha256
        ],
        [
          "size",
          data.size.toString()
        ]
      ];
      if (data.type) {
        tags.push([
          "m",
          data.type
        ]);
      }
      return tags;
    }));
  }
  /** Blossom "BlobDescriptor" schema. */
  static schema() {
    return external_exports.object({
      url: external_exports.string(),
      sha256: external_exports.string(),
      size: external_exports.number(),
      type: external_exports.string().optional()
    });
  }
};

// node_modules/.pnpm/@jsr+nostrify__nostrify@0.46.5_typescript@5.9.2/node_modules/@jsr/nostrify__nostrify/uploaders/NostrBuildUploader.js
var NostrBuildUploader = class _NostrBuildUploader {
  constructor(opts) {
    __publicField(this, "endpoint");
    __publicField(this, "signer");
    __publicField(this, "fetch");
    this.endpoint = (opts == null ? void 0 : opts.endpoint) ?? "https://nostr.build/api/v2/upload/files";
    this.signer = opts == null ? void 0 : opts.signer;
    this.fetch = (opts == null ? void 0 : opts.fetch) ?? globalThis.fetch.bind(globalThis);
  }
  async upload(file, opts) {
    const formData = new FormData();
    formData.append("fileToUpload", file);
    const request = new Request(this.endpoint, {
      method: "POST",
      body: formData,
      signal: opts == null ? void 0 : opts.signal
    });
    if (this.signer) {
      const t = await NIP98.template(request);
      const event = await this.signer.signEvent(t);
      request.headers.set("authorization", `Nostr ${N64.encodeEvent(event)}`);
    }
    const response = await this.fetch(request);
    const json = await response.json();
    const [data] = _NostrBuildUploader.schema().parse(json).data;
    const tags = [
      [
        "url",
        data.url
      ],
      [
        "m",
        data.mime
      ],
      [
        "x",
        data.sha256
      ],
      [
        "ox",
        data.original_sha256
      ],
      [
        "size",
        data.size.toString()
      ]
    ];
    if (data.dimensions) {
      tags.push([
        "dim",
        `${data.dimensions.width}x${data.dimensions.height}`
      ]);
    }
    if (data.blurhash) {
      tags.push([
        "blurhash",
        data.blurhash
      ]);
    }
    return tags;
  }
  /** nostr.build API response schema. */
  static schema() {
    return external_exports.object({
      data: external_exports.object({
        url: external_exports.string().url(),
        blurhash: external_exports.string().optional().catch(void 0),
        sha256: external_exports.string(),
        original_sha256: external_exports.string(),
        mime: external_exports.string(),
        size: external_exports.number(),
        dimensions: external_exports.object({
          width: external_exports.number().positive(),
          height: external_exports.number().positive()
        }).optional().catch(void 0)
      }).array().min(1)
    });
  }
};
export {
  BlossomUploader,
  NostrBuildUploader
};
//# sourceMappingURL=@nostrify_nostrify_uploaders.js.map
