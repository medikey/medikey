import { Invoice } from "@getalby/lightning-tools";
import { Nip47MakeInvoiceRequest, Nip47PayInvoiceRequest } from "../nwc/types";
import { NewNWCClientOptions, NWCClient } from "../nwc/NWCClient";
import { ReceiveInvoice } from "./ReceiveInvoice";
import { Amount } from "./Amount";
export type LNClientCredentials = string | NWCClient | NewNWCClientOptions;
/**
 * A simple lightning network client to interact with your lightning wallet
 */
export declare class LNClient {
    readonly nwcClient: NWCClient;
    /**
     * Create a new LNClient
     * @param credentials credentials to connect to a NWC-based wallet. This can be a NWC connection string e.g. nostr+walletconnect://... or an existing NWC Client. Learn more at https://nwc.dev
     */
    constructor(credentials: LNClientCredentials);
    /**
     * Make a payment
     * @param recipient a BOLT-11 invoice or lightning address
     * @param amount the amount to pay, only required if paying to a lightning address or the amount is not specified in the BOLT 11 invoice.
     * @param args additional options, e.g. to store metadata on the payment
     * @returns the receipt of the payment, and details of the paid invoice.
     */
    pay(recipient: string, amount?: Amount, args?: Omit<Nip47PayInvoiceRequest, "invoice" | "amount">): Promise<{
        invoice: Invoice;
        preimage: string;
        fees_paid: number;
    }>;
    /**
     * Request to receive a payment
     * @param amount the amount requested, either in sats (e.g. {satoshi: 21}) or fiat (e.g. new FiatAmount(21, "USD")).
     * @param args additional options, e.g. to set a description on the payment request, or store metadata for the received payment
     * @returns the invoice to be paid, along with methods to easily listen for a payment and act upon it.
     */
    requestPayment(amount: Amount, args?: Omit<Nip47MakeInvoiceRequest, "amount">): Promise<ReceiveInvoice>;
    close(): void;
}
export { LNClient as LN };
