import { Event, EventTemplate, Relay } from "nostr-tools";
import { Nip47Capability, Nip47GetInfoResponse, Nip47GetBudgetResponse, Nip47GetBalanceResponse, Nip47PayResponse, Nip47MultiPayInvoiceRequest, Nip47MultiPayKeysendRequest, Nip47MultiPayInvoiceResponse, Nip47MultiPayKeysendResponse, Nip47ListTransactionsRequest, Nip47ListTransactionsResponse, Nip47Transaction, Nip47NotificationType, Nip47Notification, Nip47PayInvoiceRequest, Nip47PayKeysendRequest, Nip47MakeInvoiceRequest, Nip47LookupInvoiceRequest, Nip47SignMessageRequest, Nip47CreateConnectionRequest, Nip47CreateConnectionResponse, Nip47SignMessageResponse, NWCAuthorizationUrlOptions, Nip47MakeHoldInvoiceRequest, Nip47SettleHoldInvoiceRequest, Nip47SettleHoldInvoiceResponse, Nip47CancelHoldInvoiceRequest, Nip47CancelHoldInvoiceResponse } from "./types";
export interface NWCOptions {
    relayUrl: string;
    walletPubkey: string;
    secret?: string;
    lud16?: string;
}
export type NewNWCClientOptions = {
    relayUrl?: string;
    secret?: string;
    walletPubkey?: string;
    nostrWalletConnectUrl?: string;
    lud16?: string;
};
export declare class NWCClient {
    relay: Relay;
    relayUrl: string;
    secret: string | undefined;
    lud16: string | undefined;
    walletPubkey: string;
    options: NWCOptions;
    private _encryptionType;
    static parseWalletConnectUrl(walletConnectUrl: string): NWCOptions;
    constructor(options?: NewNWCClientOptions);
    get nostrWalletConnectUrl(): string;
    getNostrWalletConnectUrl(includeSecret?: boolean): string;
    get connected(): boolean;
    get publicKey(): string;
    get encryptionType(): string;
    getPublicKey(): Promise<string>;
    signEvent(event: EventTemplate): Promise<Event>;
    getEventHash(event: Event): string;
    close(): void;
    encrypt(pubkey: string, content: string): Promise<string>;
    decrypt(pubkey: string, content: string): Promise<string>;
    static getAuthorizationUrl(authorizationBasePath: string, options: NWCAuthorizationUrlOptions | undefined, pubkey: string): URL;
    /**
     * create a new client-initiated NWC connection via HTTP deeplink
     *
     * @param authorizationBasePath the deeplink path e.g. https://my.albyhub.com/apps/new
     * @param options configure the created app (e.g. the name, budget, expiration)
     * @param secret optionally pass a secret, otherwise one will be generated.
     */
    static fromAuthorizationUrl(authorizationBasePath: string, options?: NWCAuthorizationUrlOptions, secret?: string): Promise<NWCClient>;
    getWalletServiceInfo(): Promise<{
        encryptions: string[];
        capabilities: Nip47Capability[];
        notifications: Nip47NotificationType[];
    }>;
    getInfo(): Promise<Nip47GetInfoResponse>;
    getBudget(): Promise<Nip47GetBudgetResponse>;
    getBalance(): Promise<Nip47GetBalanceResponse>;
    payInvoice(request: Nip47PayInvoiceRequest): Promise<Nip47PayResponse>;
    payKeysend(request: Nip47PayKeysendRequest): Promise<Nip47PayResponse>;
    signMessage(request: Nip47SignMessageRequest): Promise<Nip47SignMessageResponse>;
    createConnection(request: Nip47CreateConnectionRequest): Promise<Nip47CreateConnectionResponse>;
    multiPayInvoice(request: Nip47MultiPayInvoiceRequest): Promise<Nip47MultiPayInvoiceResponse>;
    multiPayKeysend(request: Nip47MultiPayKeysendRequest): Promise<Nip47MultiPayKeysendResponse>;
    makeInvoice(request: Nip47MakeInvoiceRequest): Promise<Nip47Transaction>;
    makeHoldInvoice(request: Nip47MakeHoldInvoiceRequest): Promise<Nip47Transaction>;
    settleHoldInvoice(request: Nip47SettleHoldInvoiceRequest): Promise<Nip47SettleHoldInvoiceResponse>;
    cancelHoldInvoice(request: Nip47CancelHoldInvoiceRequest): Promise<Nip47CancelHoldInvoiceResponse>;
    lookupInvoice(request: Nip47LookupInvoiceRequest): Promise<Nip47Transaction>;
    listTransactions(request: Nip47ListTransactionsRequest): Promise<Nip47ListTransactionsResponse>;
    subscribeNotifications(onNotification: (notification: Nip47Notification) => void, notificationTypes?: Nip47NotificationType[]): Promise<() => void>;
    private executeNip47Request;
    private executeMultiNip47Request;
    private _checkConnected;
    private _selectEncryptionType;
    private _findPreferredEncryptionType;
}
